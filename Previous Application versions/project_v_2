from operator import attrgetter

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
import ryu.ofproto.ofproto_v1_3_parser as parser
import ryu.ofproto.ofproto_v1_3 as ofproto
from ryu.ofproto import oxm_fields
from ryu.lib.packet import packet
from ryu.lib.packet import ether_types
from ryu.lib.packet import ethernet, arp, ipv4, ipv6, tcp
from ryu.lib import hub

from cockpit import CockpitApp
from netaddr import IPAddress, IPNetwork

#tm task=learning

ETHERTYPES = {2048: "IPv4", 2054: "ARP", 34525: "IPv6"}
L4PROTO = {1: "ICMP", 4: "IP-in-IP", 6: "TCP", 17: "UDP"}

## Clear ARP cache
##  --> h1 ip -s -s neigh flush all


## TODO 1: What's going on? Get an overview over the code and analyze the situation.
#    --> Try: h1 ping h2
#             h3 ping h4
#             pingall
#             iperf h1 h2
#
#             dpctl dump-flows -O OpenFlow13


class LearningSwitch(CockpitApp):
    ## Initialize SDN-App
    def __init__(self, *args, **kwargs):
        super(LearningSwitch, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.pkt_count = {}
        self.datapaths = {}
        self.monitor_thread = hub.spawn(self._monitor)
        self.total_packets = 0
        self.packets_by_ip = dict()
        self.packets_by_flag = dict()
        self.syn_counter = 0
        self.ack_counter = 0
        self.syn_ack_counter = 0

    @set_ev_cls(ofp_event.EventOFPStateChange,
                [MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]

    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(10)

    def _request_stats(self, datapath):
        self.logger.debug('send stats request: %016x', datapath.id)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPFlowStatsRequest(datapath)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_ANY)
        datapath.send_msg(req)

    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        #msg = ev.msg
        #ofp = msg.datapath.ofproto
        #body = ev.msg.body

        #flows = []
        #for stat in body:
        #    flows.append('table_id=%s match=%s '
        #                'duration_sec=%d duration_nsec=%d '
        #                'priority=%d '
        #                'idle_timeout=%d hard_timeout=%d '
        #                'cookie=%d packet_count=%d byte_count=%d ' %
        #                (stat.table_id, stat.match,
        #                stat.duration_sec, stat.duration_nsec,
        #                stat.priority,
        #                stat.idle_timeout, stat.hard_timeout,
        #                stat.cookie, stat.packet_count, stat.byte_count))
        #self.logger.debug('FlowStats: %s', flows)


        body = ev.msg.body
        datapath = ev.msg.datapath

        self.logger.info('\ndatapath             in-port '
                         '  out-port        eth-dst   packets'
                         '  bytes    dur-sec   ')
        self.logger.info('_______________________________'
                         '_______________________________'
                         '_______________________________')

        try:
            for stat in sorted([flow for flow in body if flow.priority == 1],
                                key=lambda flow: (flow.match['in_port'],
                                                  flow.match['eth_dst'])):

                self.logger.info('%016x %8x %17s %8x %8d %8d %8d',
                                ev.msg.datapath.id,
                                stat.match['in_port'], stat.match['eth_dst'],
                                stat.instructions[0].actions[0].port,
                                stat.packet_count, stat.byte_count,
                                stat.duration_sec)
        except KeyError as e:
                print("")

    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        body = ev.msg.body

        self.logger.info('\ndatapath            port   '
                         'rx-pkts  rx-bytes  rx-error  '
                         'tx-pkts  tx-bytes  tx-error  ')
        self.logger.info('_______________________________'
                         '_______________________________'
                         '_______________________________')

        for stat in sorted(body, key=attrgetter('port_no')):
            self.logger.info('%016x %8x %8d %8d %8d %8d %8d %8d',
                            ev.msg.datapath.id, stat.port_no,
                            stat.rx_packets, stat.rx_bytes, stat.rx_errors,
                            stat.tx_packets, stat.tx_bytes, stat.tx_errors)

    def debug_output(self, dp, pkt, in_port):
        eth = pkt.get_protocol(ethernet.ethernet)

        self.pkt_count[dp.id] += 1

        ## TODO 2: Enable some more logging?
        ## Info: Packet-in / Ethernet packet
        print("/// [Switch {}]: PACKET-IN (#{}) on port: {}".format(dp.id, self.pkt_count[dp.id], in_port))
        print("      SRC: {}, DST: {} --> {}".format(eth.src, eth.dst, ETHERTYPES[eth.ethertype]))

#        Info: IP Packet
        if eth.ethertype == ether_types.ETH_TYPE_IP:
            ip_pkt = pkt.get_protocol(ipv4.ipv4)
            print("           {:17},      {:17} --> {}".format(ip_pkt.src, ip_pkt.dst, L4PROTO[ip_pkt.proto]))

#             Info: TCP Packet
            if ip_pkt.proto == 6:
                tcp_pkt = pkt.get_protocol(tcp.tcp)
                print("      SRC-PORT: {}, DST-PORT: {}, SEQ: {}, ACK: {}".format(tcp_pkt.src_port, tcp_pkt.dst_port, tcp_pkt.seq, tcp_pkt.ack))

        if eth.ethertype == ether_types.ETH_TYPE_ARP:
            arp_pkt = pkt.get_protocol(arp.arp)
            print("  [ARP] SRC-MAC: {}, SRC-IP: {}; DST-MAC: {} DST-IP: {}".format(arp_pkt.src_mac, arp_pkt.src_ip, arp_pkt.dst_mac, arp_pkt.dst_ip))

#       # --> see https://osrg.github.io/ryu-book/en/html/packet_lib.html for more info

    ## When a new switch connects to the controller
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        dp = ev.msg.datapath

        ## init (per-data path) variables
        #self.MAC_TO_PORT[dp.id] = {}
        self.pkt_count[dp.id] = 0

        ## Note: check example for syntax how-to.
        #self.example()

        ## some debug output
        print("")
        print("")
        print("/// Switch connected. ID: {}".format(dp.id))

        ## FLOW RULES

        ## default "all to controller" flow
        #match = parser.OFPMatch()
        #action = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        #self.program_flow(dp, match, action, priority=0, idle_timeout=0, hard_timeout=0)


        ## Directly connect port 1 and 2 with proactive flow rules

        #match = parser.OFPMatch(in_port=1)
        #action = [parser.OFPActionOutput(2)]
        #self.program_flow(dp, match, action, priority=100, idle_timeout=0, hard_timeout=0)


        #match = parser.OFPMatch(in_port=2)
        #action = [parser.OFPActionOutput(1)]
        #self.program_flow(dp, match, action, priority=100, idle_timeout=0, hard_timeout=0)

        ## --> see https://osrg.github.io/ryu-book/en/html/openflow_protocol.html for more match options,
        ##       e.g.: action = [parser.OFPActionOutput(ofproto.OFPP_FLOOD)]



    ## When a new packet comes in at the controller -- "PACKET-IN"
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def packet_in_handler(self, ev):
        # all info is stored in the ev object, extract some relevant fields
        msg = ev.msg
        datapath = msg.datapath
        in_port = msg.match["in_port"]
        data = msg.data
        pkt = packet.Packet(data)
        eth = pkt.get_protocol(ethernet.ethernet)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        pkt = packet.Packet(msg.data)
        ip = pkt.get_protocol(ipv4.ipv4)
        eth_pkt = pkt.get_protocol(ethernet.ethernet)
        dst = eth_pkt.dst
        src = eth_pkt.src

        # ignore LLDP Packets
        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            return

        if eth.ethertype == ether_types.ETH_TYPE_ARP:
            # This is an ARP packet. It must be handled differently
            # ensure direct connectivity between edge nodes of the ASes
            self.handle_arp(datapath, in_port, eth, data)
            return

        if ip is None:
            return

        if not ip.src in self.packets_by_ip:
            self.packets_by_ip[ip.src] = [0, 0]

        if not ip.src in self.packets_by_flag:
            self.packets_by_flag[ip.src] = 0

        #self.packets_by_ip[ip.src] += 1

        self.debug_output(datapath, pkt, in_port)

        self.mac_to_port[dpid][src] = in_port

        if eth.ethertype == ether_types.ETH_TYPE_IP:
            if ip.proto == 6:
                tcp_pkt = pkt.get_protocol(tcp.tcp)
                self.total_packets+=1
                print("TCP packet total : {}".format(self.total_packets))
                if tcp_pkt.has_flags(tcp.TCP_SYN):
                    self.syn_counter += 1
                    self.packets_by_ip[ip.src][0] += 1
                    print("SYN total : {}".format(self.syn_counter))
                elif tcp_pkt.has_flags(tcp.TCP_ACK):
                    self.ack_counter += 1
                    self.packets_by_ip[ip.dst][1] += 1
                    print("ACK total : {}".format(self.ack_counter))

        #if not ip.src in self.packets_by_flag:
        #    self.packets_by_flag[ip.src] = 0

        #self.packets_by_flag[ip.src] += self.syn_counter

        #print(self.packets_by_ip)
        #print(self.packets_by_flag)

        for key in self.packets_by_ip:
            print(key, '->', self.packets_by_ip[key])

        match = parser.OFPMatch(
            eth_type=0x0800,
            ip_proto=6)
        action = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        self.program_flow(datapath, match, action, priority=100, idle_timeout=0, hard_timeout=0)

        #for key in self.packets_by_ip:
        #    print(key, '->', self.packets_by_ip[key])

        #if self.syn_counter > 1000:
        #    self.launch_countermeasures(datapath, match)
            #match = parser.OFPMatch(
            #        eth_type=0x0800,
            #        ip_proto=6,
            #        tcp_flags=0x002)
            #print("High volume SYN traffic: Dropping packets")
            #self.program_flow(datapath, match, [], priority=100, idle_timeout=0, hard_timeout=0)

        #match = parser.OFPMatch(
        #    eth_type=0x0800,
        #    ip_proto=6,
        #    tcp_flags=0x010)
        #action = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        #self.program_flow(datapath, match, action, priority=100, idle_timeout=0, hard_timeout=0)

        ip = pkt.get_protocol(ipv4.ipv4)

        #if in_port == 1:
        #    if not ip.src in self.packets_by_ip:
        #        self.packets_by_ip[ip.src] = 0

        #    self.packets_by_ip[ip.src] += 1

        #print(self.packets_by_ip)

        #self.logger.info("syn count %s", syn_counter)

        #pkt = tcp.tcp(bits=(tcp.TCP_SYN | tcp.TCP_ACK))

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
            self.program_flow(datapath, match, actions, 1)

        out = parser.OFPPacketOut(datapath=datapath,
                                    buffer_id=ofproto.OFP_NO_BUFFER,
                                    in_port=in_port, actions=actions,
                                    data=msg.data)
        datapath.send_msg(out)

        # An empty action list indicates a drop rule


        ## TODO 4: Controller based switch. Learn MAC-->Port
        ## TODO 5: Push flow rules into the SDN-switch

    def launch_countermeasures(self, datapath, match):

        #match = parser.OFPMatch(
        #    eth_type=0x0800,
        #    ip_proto=6,
        #    tcp_flags=0x002,
        #    ipv4_src = src_ip)
        action = []
        self.program_flow(datapath, match, action, priority=100, idle_timeout=0, hard_timeout=0)


    def handle_arp(self, datapath, in_port, eth, data):
        """ This method implements a simple mechanism to install
            forwarding rules for ARP packets. Packets that are
            not handled by any of these rules are flooded to
            nearby switches.
        """
        ofproto = datapath.ofproto

        dst = eth.dst
        src = eth.src

        match = parser.OFPMatch(
            eth_type = ether_types.ETH_TYPE_ARP,
            eth_dst = src
        )

        # Progamm a flow that forwards ARP packets to directly connected
        # network nodes so we don't have to bother with subsequent
        # ARP packets anymore.
        self.program_flow(datapath, match, [parser.OFPActionOutput(in_port)],
            priority = 1)

        # Flood the received ARP message on all ports of the switch
        self.send_pkt(datapath, data, port = ofproto.OFPP_FLOOD)

    ## Example code
    def example(self, dp):
        self.MAC_TO_PORT[dp.id]["00:00:00:00:00:01"] = 99

        try:
            port = self.MAC_TO_PORT[dp.id]["00:00:00:00:00:01"]
            print("port: {}".format(port))

            port = self.MAC_TO_PORT[dp.id]["00:00:00:00:00:02"]
            print("port: {}".format(port))
        except KeyError as e:
            print("no port found!")