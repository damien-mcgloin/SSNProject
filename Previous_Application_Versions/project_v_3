from operator import attrgetter

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
import ryu.ofproto.ofproto_v1_3_parser as parser
import ryu.ofproto.ofproto_v1_3 as ofproto
from ryu.ofproto import oxm_fields
from ryu.lib.packet import packet
from ryu.lib.packet import ether_types
from ryu.lib.packet import ethernet, arp, ipv4, ipv6, tcp
from ryu.lib import hub

from cockpit import CockpitApp
from netaddr import IPAddress, IPNetwork

from time import sleep
from collections import OrderedDict

ETHERTYPES = {2048: "IPv4", 2054: "ARP", 34525: "IPv6"}
L4PROTO = {1: "ICMP", 4: "IP-in-IP", 6: "TCP", 17: "UDP"}

class LearningSwitch(CockpitApp):
    ## Initialize SDN-App
    def __init__(self, *args, **kwargs):
        super(LearningSwitch, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.pkt_count = {}
        self.datapaths = {}
        self.monitor_thread = hub.spawn(self._monitor)
        self.total_packets = 0
        self.packets_by_ip = dict()
        self.packets_by_flag = dict()
        self.packets_per_sec = OrderedDict()
        self.packets = {}
        self.syn_counter = 0
        self.ack_counter = 0
        self.syn_ack_counter = 0

    @set_ev_cls(ofp_event.EventOFPStateChange,
                [MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]

    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(10)

    def _request_stats(self, datapath):
        self.logger.debug('send stats request: %016x', datapath.id)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPFlowStatsRequest(datapath)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_ANY)
        datapath.send_msg(req)

    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        body = ev.msg.body
        datapath = ev.msg.datapath

        self.logger.info('\ndatapath             in-port '
                         '  out-port        eth-dst   packets'
                         '  bytes    dur-sec   ')
        self.logger.info('_______________________________'
                         '_______________________________'
                         '_______________________________')

        try:
            for stat in sorted([flow for flow in body if flow.priority == 1],
                                key=lambda flow: (flow.match['in_port'],
                                                  flow.match['eth_dst'])):

                self.logger.info('%016x %8x %17s %8x %8d %8d %8d',
                                ev.msg.datapath.id,
                                stat.match['in_port'], stat.match['eth_dst'],
                                stat.instructions[0].actions[0].port,
                                stat.packet_count, stat.byte_count,
                                stat.duration_sec)
        except KeyError as e:
                print("")

    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        body = ev.msg.body
        datapath = ev.msg.datapath
        packets = {}

        self.logger.info('\ndatapath            port   '
                         'rx-pkts  rx-bytes  rx-error  '
                         'tx-pkts  tx-bytes  tx-error  dur-sec')
        self.logger.info('_______________________________'
                         '_______________________________'
                         '_______________________________')

        for stat in sorted(body, key=attrgetter('port_no')):
            self.logger.info('%016x %8x %8d %8d %8d %8d %8d %8d %8d',
                            ev.msg.datapath.id, stat.port_no,
                            stat.rx_packets, stat.rx_bytes, stat.rx_errors,
                            stat.tx_packets, stat.tx_bytes, stat.tx_errors,
                            stat.duration_sec)

            self.packets_per_sec[stat.tx_packets] = stat.duration_sec

        try:
            self.one = list(self.packets_per_sec.items())[-1]
            print(self.one)
        except IndexError:
            self.one = 'null'

        try:
            self.two = list(self.packets_per_sec.items())[-5]
            print(self.two)
        except IndexError:
            self.two = 'null'

        try:
            self.count = self.one[0] - self.two[0]
            print(self.count)
        except TypeError:
            pass

        #try:
        #    if self.count > 1000:
        #        match = parser.OFPMatch(
        #                eth_type=0x0800,
        #                ip_proto=6)
        #        action = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        #        self.program_flow(datapath, match, action, priority=100, idle_timeout=10, hard_timeout=0)
        #except AttributeError:
        #    pass



        match = parser.OFPMatch(
                    eth_type=0x0800,
                    ip_proto=6)
        action = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        self.program_flow(datapath, match, action, priority=100, idle_timeout=0, hard_timeout=0)

        if len(self.packets_per_sec) > 8:
            self.packets_per_sec.popitem(last=False)

    def debug_output(self, dp, pkt, in_port):
        eth = pkt.get_protocol(ethernet.ethernet)

        self.pkt_count[dp.id] += 1

        ## Info: Packet-in / Ethernet packet
        print("/// [Switch {}]: PACKET-IN (#{}) on port: {}".format(dp.id, self.pkt_count[dp.id], in_port))
        print("      SRC: {}, DST: {} --> {}".format(eth.src, eth.dst, ETHERTYPES[eth.ethertype]))

#        Info: IP Packet
        if eth.ethertype == ether_types.ETH_TYPE_IP:
            ip_pkt = pkt.get_protocol(ipv4.ipv4)
            print("           {:17},      {:17} --> {}".format(ip_pkt.src, ip_pkt.dst, L4PROTO[ip_pkt.proto]))

#             Info: TCP Packet
            if ip_pkt.proto == 6:
                tcp_pkt = pkt.get_protocol(tcp.tcp)
                print("      SRC-PORT: {}, DST-PORT: {}, SEQ: {}, ACK: {}".format(tcp_pkt.src_port, tcp_pkt.dst_port, tcp_pkt.seq, tcp_pkt.ack))

        if eth.ethertype == ether_types.ETH_TYPE_ARP:
            arp_pkt = pkt.get_protocol(arp.arp)
            print("  [ARP] SRC-MAC: {}, SRC-IP: {}; DST-MAC: {} DST-IP: {}".format(arp_pkt.src_mac, arp_pkt.src_ip, arp_pkt.dst_mac, arp_pkt.dst_ip))

    ## When a new switch connects to the controller
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        dp = ev.msg.datapath

        ## init (per-data path) variables
        #self.MAC_TO_PORT[dp.id] = {}
        self.pkt_count[dp.id] = 0

        ## some debug output
        print("")
        print("")
        print("/// Switch connected. ID: {}".format(dp.id))

    ## When a new packet comes in at the controller -- "PACKET-IN"
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def packet_in_handler(self, ev):
        # all info is stored in the ev object, extract some relevant fields
        msg = ev.msg
        datapath = msg.datapath
        in_port = msg.match["in_port"]
        data = msg.data
        pkt = packet.Packet(data)
        eth = pkt.get_protocol(ethernet.ethernet)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        pkt = packet.Packet(msg.data)
        ip = pkt.get_protocol(ipv4.ipv4)
        eth_pkt = pkt.get_protocol(ethernet.ethernet)
        dst = eth_pkt.dst
        src = eth_pkt.src

        # ignore LLDP Packets
        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            return

        if eth.ethertype == ether_types.ETH_TYPE_ARP:
            # This is an ARP packet. It must be handled differently
            # ensure direct connectivity between edge nodes of the ASes
            self.handle_arp(datapath, in_port, eth, data)
            return

        if ip is None:
            return

        if not ip.src in self.packets_by_ip:
            self.packets_by_ip[ip.src] = [0, 0]

        if not ip.src in self.packets_by_flag:
            self.packets_by_flag[ip.src] = 0

        self.debug_output(datapath, pkt, in_port)

        self.mac_to_port[dpid][src] = in_port

        if eth.ethertype == ether_types.ETH_TYPE_IP:
            if ip.proto == 6:
                tcp_pkt = pkt.get_protocol(tcp.tcp)
                self.total_packets+=1
                print("TCP packet total : {}".format(self.total_packets))
                #if tcp_pkt.has_flags(tcp.TCP_SYN):
                #    self.syn_counter += 1
                #    self.packets_by_ip[ip.src][0] += 1
                #    print("SYN total : {}".format(self.syn_counter))
                if tcp_pkt.has_flags(tcp.TCP_SYN) and dst in self.mac_to_port[dpid]:
                    self.syn_counter += 1
                    self.packets_by_ip[ip.src][0] += 1
                    print("SYN total : {}".format(self.syn_counter))
                elif tcp_pkt.has_flags(tcp.TCP_ACK):
                    self.ack_counter += 1
                    self.packets_by_ip[ip.dst][1] += 1
                    print("ACK total : {}".format(self.ack_counter))


        print(self.packets_by_ip)

        #for key in self.packets_by_ip:
        #    print(key, '->', self.packets_by_ip[key])

        #for key in self.packets_by_ip:
        #match = parser.OFPMatch(
        #    eth_type=0x0800,
        #    ip_proto=6,
        #    tcp_flags=0x002
        #    )
        #action = []
        #self.program_flow(datapath, match, action, priority=2, idle_timeout=0, hard_timeout=0)

        #if self.syn_counter - self.ack_counter > 10:
        for key in self.packets_by_ip:
                if ip.src in self.packets_by_ip:
                        if self.packets_by_ip[ip.src][0] > 0 and self.packets_by_ip[ip.src][1] == 0 and ip.dst == "10.0.0.2":
                            match = parser.OFPMatch(
                                    eth_type = ether_types.ETH_TYPE_IP,
                                    ipv4_dst = ip.src
                                    )
                            action = []
                            self.program_flow(datapath, match, action, priority=200, idle_timeout=0, hard_timeout=0)
                #elif self.packets_by_ip[ip.src][1] > 0 and ip.dst == "10.0.0.2":
                #    self.send_pkt(datapath, data, port=ofproto.OFPP_FLOOD)
                #ipv4_dst = ip.dst

                #elif self.packets_by_ip[ip.src][1] > 0 and ip.dst == "10.0.0.2":
                #    self.send_pkt(datapath, data, port = ofproto.OFPP_FLOOD)

                #elif ip.src != "10.0.0.2" and ip.dst in self.mac_to_port[dpid]:
                #    out_port = self.mac_to_port[dpid][dst]
                #    match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
                #    actions = [parser.OFPActionOutput(out_port)]
                #    self.program_flow(datapath, match, actions, 250)

        #for key in self.packets_by_ip:
        #    if self.packets_by_ip[key][1] == 0:
        #        if self.packets_by_ip[key][1] < self.packets_by_ip[key][0]:
        #            if ip.src == self.packets_by_ip[key]:
        #                match = parser.OFPMatch(
        #                        eth_type = ether_types.ETH_TYPE_IP,
        #                        ipv4_src = key
        #                        )
                            #match = parser.OFPMatch(
                            #    eth_type=0x0800,
                            #    ip_proto=6,
                            #    tcp_flags=0x002
                            #    )
                        #action = []
                        #self.program_flow(datapath, match, action, priority=200, idle_timeout=0, hard_timeout=0)

                #self.launch_countermeasures(datapath)
                #return
            #if self.packets_by_ip[key][1] == 0 and self.packets_by_ip[key][1] < self.packets_by_ip[key][0]:
                    #self.launch_countermeasures(datapath, key)



                #could potentially set a timer and wipe the list every 100 seconds?

                #if k == self.packets_by_ip[key]:
                #    del self.packets_by_ip[k]
            #print(key)
                #for item in self.packets_by_ip.items():
                #    if item in self.packets_by_ip:
                #        del self.packets_by_ip[item]

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
            self.program_flow(datapath, match, actions, 1)

        out = parser.OFPPacketOut(datapath=datapath,
                                    buffer_id=ofproto.OFP_NO_BUFFER,
                                    in_port=in_port, actions=actions,
                                    data=msg.data)
        datapath.send_msg(out)

    def launch_countermeasures(self, datapath):

        for key in self.packets_by_ip:
            if self.packets_by_ip[key][1] == 0 and self.packets_by_ip[key][1] < self.packets_by_ip[key][0]:
                if key in self.packets_by_ip:
                    match = parser.OFPMatch(
                        eth_type = ether_types.ETH_TYPE_IP,
                        ipv4_src = key
                        )
                    action = []
                    self.program_flow(datapath, match, action, priority=200, idle_timeout=20, hard_timeout=0)
                elif in_port==1:
                    match = parser.OFPMatch(in_port=1)
                    action = [parser.OFPActionOutput(2)]
                    self.program_flow(dp, match, action, priority=100, idle_timeout=0, hard_timeout=0)
                elif in_port==2:
                    match = parser.OFPMatch(in_port=2)
                    action = [parser.OFPActionOutput(1)]
                    self.program_flow(dp, match, action, priority=100, idle_timeout=0, hard_timeout=0)


        #if key in self.packets_by_ip:

        #if self.packets_by_ip[key][1] == 0 and self.packets_by_ip[key][1] < self.packets_by_ip[key][0]:
        #    match = parser.OFPMatch(
        #        eth_type=0x0800,
        #        ip_proto=6,
        #        tcp_flags=0x002
        #        )
        #    action = []
        #    self.program_flow(datapath, match, action, priority=200, idle_timeout=1, hard_timeout=0)

        #if key in self.packets_by_ip:
        #    match = parser.OFPMatch(
        #        eth_type = ether_types.ETH_TYPE_IP,
        #        ipv4_dst = "10.0.0.2"
        #        )
        #    action = []
        #    self.program_flow(datapath, match, action, priority=100, idle_timeout=0, hard_timeout=0)

        #try matching on tcp syn traffic here or maybe ip dst


        #code below used to try and remove key and values from dictionary after flow rule is created
        #after much trial and error the end result was always an error
        #delete = []
        #for k, v in self.packets_by_ip.items():
        #    if k == key:
        #        delete.append(k)

        #for i in delete:
        #    del self.packets_by_ip[i]

        #for k in delete: del self.packets_by_ip[k]

    def handle_arp(self, datapath, in_port, eth, data):
        """ This method implements a simple mechanism to install
            forwarding rules for ARP packets. Packets that are
            not handled by any of these rules are flooded to
            nearby switches.
        """
        ofproto = datapath.ofproto

        dst = eth.dst
        src = eth.src

        match = parser.OFPMatch(
            eth_type = ether_types.ETH_TYPE_ARP,
            eth_dst = src
        )

        # Progamm a flow that forwards ARP packets to directly connected
        # network nodes so we don't have to bother with subsequent
        # ARP packets anymore.
        self.program_flow(datapath, match, [parser.OFPActionOutput(in_port)],
            priority = 1)

        # Flood the received ARP message on all ports of the switch
        self.send_pkt(datapath, data, port = ofproto.OFPP_FLOOD)